
MWN2 package OPTIONS block PRINT_WELL_NODE_FLOW output file

Writes for each time step all the active MNW2 wells'
nodal flow rate. Note that because this output has 
a variable number of columns, it is recommended to 
use the PRINT_NODE_INFO output option instead.

The output may be text or binary format.

If the output file is text format, then it will contain a single header line
followed by the output written for each time step. If the output file is binary format,
then each times step writes a binary record containing only the output data.


/-------------------------------------\
|                                     |
|    Text File Header Definition      |
|                                     |
\-------------------------------------/

DATE_START                 is the starting calendar date of the time step in the form: yyyy-mm-ddThh:mm:ss
PER                        is the stress period number
STP                        is the time step number
DELT              [T]      is the time step length
WELLID                     is the name of the MWN2 well
PUMPING_RATE_INI  [L3/T]   is the MNW2 desired pumping rate (Qdes); this is the initial pumping rate assigned to the nodes.
NOD_01            [L3/T]   is the flow rate with respect to groundwater for Node 1 (negative is outflow).
NOD_02            [L3/T]   is the flow rate with respect to groundwater for Node 2 
...                        
NOD_xx            [L3/T]   is repeated up to the maximum number of nodes 
                           (that is the well with the most nodes determines the number of columns)
                           Note, a value of zero is set for nodes that do not exist for wells. That is a 2 node well with 3 max number of nodes would always have NOD_03 as 0.0


/-------------------------------------\
|                                     |
|    Binary File Record Formatting    |
|                                     |
\-------------------------------------/


DATE_START          CHARACTER(19), starting date formatted as ‘yyyy-mm-ddThh:mm:ss’
PER                 INTEGER
STP                 INTEGER
DELT                DOUBLE
WELLID              CHARACTER(20)
PUMPING_RATE_INI    DOUBLE
NOD_01              DOUBLE
NOD_02              DOUBLE
...                 DOUBLE
NOD_xx              DOUBLE


/----------------------------\
|                            |
|   Additional Information   |
|                            |
\----------------------------/


Date output is formatted using ISO 8601-1:2019 standard without a time zone designation:
https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations

The general format is:
yyyy-mm-ddThh:mm:ss
                   where:
                         yyyy is the four digit Gregorian year
                         mm   before the T is the two digit month number       (01 to 12)
                         dd   is the two digit day of the month                (01 to {28, 29, 30, 31}, depending on the month)
                         T    calendar date and 24-hour clock time separator
                         hh   is the hour within the day                       (00 to 23 hour)
                         mm   after the T is the two digit minutes in the hour (00 to 59 minute)
                         ss   is the two digit seconds of the minute           (00 to 59 second)

Output is in model units that uses an
   L as a place holder for Length, L2 is for area, L3 is for volume and
   T as a place holder for Time

which are defined in the DIS package as being:
   L: Feet, Meters, Centimeters, and Undefined
   T: Seconds, Minutes, Hours, Days, Years, and Undefined

------------------------------------------------------------------------------------------

The MODFLOW-OWHM standard binary formatting is set to
Fortran Unformatted Stream (C style binary).

The description of each header indicates the Fortran variable
that is used to write the binary recorded.

The following explain their storage use:

Keyword       Storage      Default Fortran Type  Python Numpy Type       Fortran 2003 Standard
DOUBLE        8 bytes      Double Precision      numpy.dtype('float64')  REAL(kind=real64)
INTEGER       4 bytes      Integer               numpy.dtype('int32')    INTEGER(kind=int32)
CHARACTER(X)  X × 1 bytes  Character(X)          numpy.dtype('SX')       CHARACTER(len=X)
SNGL          4 bytes      Real                  numpy.dtype('float32')  REAL(kind=real32)

------------------------------------------------------------------------------------------------------------------------

